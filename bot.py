#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import base64
import requests
import telebot
from telebot import types
from openai import OpenAI
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TG_BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
bot = telebot.TeleBot(TG_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI(api_key=OPENAI_API_KEY)

# Google Custom Search API
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
GOOGLE_CX = os.getenv('GOOGLE_CX')

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
HISTORY_DIR = Path('./chat_history')
HISTORY_DIR.mkdir(exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
user_settings = {}
DEFAULT_MODEL = "gpt-4o-mini"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
MODELS = {
    "gpt-4o-mini": {
        "name": "GPT-4o Mini ‚ö°",
        "speed": "0.75 —Å–µ–∫",
        "description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å"
    },
    "gpt-5": {
        "name": "GPT-5 üß†",
        "speed": "3.80 —Å–µ–∫",
        "description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å"
    }
}

# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ChatGPT
SYSTEM_MESSAGE = {
    "role": "system",
    "content": """You are a helpful assistant in a Telegram bot with access to real-time internet information.

IMPORTANT: You have access to the google_search function to find current information on the internet. When users ask about:
- Current weather, news, events
- Recent information, prices, schedules
- Any time-sensitive data
USE the google_search function to provide accurate, up-to-date answers based on the search results.

Format your responses using Markdown:
- Use **bold** for important words and key concepts
- Use `code` for technical terms, commands, or code snippets
- Use ```language for multi-line code blocks
- Use bullet points or numbered lists when listing items
- Use appropriate emojis sparingly and only when contextually relevant (e.g., üí° for tips, ‚ö†Ô∏è for warnings, ‚úÖ for confirmations, üìù for notes, üîç for analysis)

Guidelines:
- Be concise and clear
- Structure your answers well
- Use emojis naturally, not in every sentence
- Make important information stand out with bold text
- ALWAYS use search results when provided - don't say you don't have access to real-time data"""
}


def get_chat_history_path(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    return HISTORY_DIR / f"chat_{chat_id}.json"


def load_chat_history(chat_id):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    history_path = get_chat_history_path(chat_id)
    if history_path.exists():
        try:
            with open(history_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading chat history: {e}")
            return [SYSTEM_MESSAGE]
    return [SYSTEM_MESSAGE]


def save_chat_history(chat_id, history):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
    history_path = get_chat_history_path(chat_id)
    try:
        with open(history_path, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error saving chat history: {e}")


def clear_chat_history(chat_id):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    history_path = get_chat_history_path(chat_id)
    if history_path.exists():
        history_path.unlink()


def get_user_model(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(chat_id, DEFAULT_MODEL)


def set_user_model(chat_id, model):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_settings[chat_id] = model


def google_search(query, num_results=5):
    """–ü–æ–∏—Å–∫ –≤ Google —á–µ—Ä–µ–∑ Custom Search API"""
    try:
        if not GOOGLE_API_KEY or not GOOGLE_CX or GOOGLE_CX == "your_search_engine_id_here":
            return "Google Search –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è GOOGLE_CX –≤ .env —Ñ–∞–π–ª–µ."

        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "key": GOOGLE_API_KEY,
            "cx": GOOGLE_CX,
            "q": query,
            "num": min(num_results, 10)  # API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 10
        }

        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        if "items" not in data:
            return f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"

        results = []
        for i, item in enumerate(data["items"][:num_results], 1):
            title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            results.append(f"{i}. **{title}**\n{snippet}\n{link}")

        return "\n\n".join(results)

    except Exception as e:
        print(f"Google Search error: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (tools) –¥–ª—è Function Calling
TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "google_search",
            "description": "Searches the internet via Google for current, real-time information. Use this function when users ask about weather, news, current events, prices, schedules, recent developments, or any time-sensitive information. Returns search results with titles, snippets, and links.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query in English (translate if needed). Be specific and include relevant keywords like 'current weather Bangkok', 'latest news OpenAI', etc."
                    },
                    "num_results": {
                        "type": "integer",
                        "description": "Number of results to return (1-10). Default is 3.",
                        "default": 3
                    }
                },
                "required": ["query"]
            }
        }
    }
]


def call_openai_api(model, messages, max_tokens=4000, use_tools=True):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ OpenAI API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if model == "gpt-5":
        # GPT-5 —Ç—Ä–µ–±—É–µ—Ç max_completion_tokens –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        # GPT-5 - reasoning –º–æ–¥–µ–ª—å, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π + –æ—Ç–≤–µ—Ç–∞
        params = {
            "model": model,
            "messages": messages,
            "max_completion_tokens": max_tokens
        }
        if use_tools:
            params["tools"] = TOOLS
            params["tool_choice"] = "auto"
        return client.chat.completions.create(**params)
    else:
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            "model": model,
            "messages": messages,
            "max_tokens": max_tokens
        }
        if use_tools:
            params["tools"] = TOOLS
            params["tool_choice"] = "auto"
        return client.chat.completions.create(**params)


def create_menu_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup(row_width=1)

    btn_new_chat = types.InlineKeyboardButton(
        "üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç",
        callback_data="new_chat"
    )
    btn_select_model = types.InlineKeyboardButton(
        "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å",
        callback_data="select_model"
    )

    markup.add(btn_new_chat, btn_select_model)
    return markup


def create_model_keyboard(current_model):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    markup = types.InlineKeyboardMarkup(row_width=1)

    for model_id, model_info in MODELS.items():
        checkmark = "‚úÖ " if model_id == current_model else ""
        btn_text = f"{checkmark}{model_info['name']} - {model_info['speed']}"
        btn = types.InlineKeyboardButton(
            btn_text,
            callback_data=f"model_{model_id}"
        )
        markup.add(btn)

    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    markup.add(btn_back)

    return markup


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    chat_id = message.chat.id
    current_model = get_user_model(chat_id)
    model_name = MODELS[current_model]["name"]

    welcome_text = f"""
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT –±–æ—Ç*

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{model_name}*

*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/start` –∏–ª–∏ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
`/menu` - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
`/new` - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
`/image` - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üé®

*‚ú® –ß—Ç–æ —è —É–º–µ—é:*
üìù –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üñº –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ)
üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚ö° –û—Ç–≤–µ—á–∞—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ!
    """
    bot.reply_to(message, welcome_text.strip(), parse_mode='Markdown')


@bot.message_handler(commands=['new'])
def new_conversation(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    chat_id = message.chat.id
    clear_chat_history(chat_id)
    bot.reply_to(message, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!", parse_mode='Markdown')


@bot.message_handler(commands=['menu'])
def show_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    chat_id = message.chat.id
    current_model = get_user_model(chat_id)
    model_name = MODELS[current_model]["name"]

    menu_text = f"""
‚öôÔ∏è *–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫*

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{model_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    markup = create_menu_keyboard()
    bot.send_message(chat_id, menu_text.strip(), reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(commands=['image', 'generate'])
def generate_image(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /image - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) < 2:
        bot.reply_to(message,
            "üé® –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/image –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ`\n"
            "–ò–ª–∏: `/generate —Ä–æ–±–æ—Ç —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É`",
            parse_mode='Markdown')
        return

    prompt = command_parts[1]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    status_message = bot.reply_to(message, "üé® *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*\n\n‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~10 —Å–µ–∫—É–Ω–¥", parse_mode='Markdown')

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1,
        )

        image_url = response.data[0].url
        revised_prompt = response.data[0].revised_prompt

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(chat_id, status_message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        caption_text = f"üé® *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!*\n\nüìù *–í–∞—à –∑–∞–ø—Ä–æ—Å:* {prompt}\n\nüí° *–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:*\n{revised_prompt[:200]}..."
        bot.send_photo(chat_id, image_url, caption=caption_text, parse_mode='Markdown')

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        print(error_message)
        bot.edit_message_text(
            "‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            chat_id,
            status_message.message_id,
            parse_mode='Markdown'
        )


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    chat_id = message.chat.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    bot.send_chat_action(chat_id, 'typing')

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_url = f'https://api.telegram.org/file/bot{TG_BOT_TOKEN}/{file_info.file_path}'
        photo_response = requests.get(file_url)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        photo_base64 = base64.b64encode(photo_response.content).decode('utf-8')

        # –ü–æ–ª—É—á–∞–µ–º caption (–µ—Å–ª–∏ –µ—Å—Ç—å)
        caption = message.caption if message.caption else "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = load_chat_history(chat_id)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        history.append({
            "role": "user",
            "content": [
                {"type": "text", "text": caption},
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{photo_base64}"
                    }
                }
            ]
        })

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        user_model = get_user_model(chat_id)
        response = call_openai_api(user_model, history)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        assistant_message = response.choices[0].message.content

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({
            "role": "assistant",
            "content": assistant_message
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        save_chat_history(chat_id, history)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.reply_to(message, assistant_message, parse_mode='Markdown')
        except Exception as markdown_error:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"Markdown error: {markdown_error}")
            bot.reply_to(message, assistant_message)

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        print(error_message)
        import traceback
        traceback.print_exc()
        bot.reply_to(message,
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/new` –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
            parse_mode='Markdown')


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    user_text = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    bot.send_chat_action(chat_id, 'typing')

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = load_chat_history(chat_id)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history.append({
            "role": "user",
            "content": user_text
        })

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        user_model = get_user_model(chat_id)
        print(f"[DEBUG] Using model: {user_model}")
        print(f"[DEBUG] History messages count: {len(history)}")

        response = call_openai_api(user_model, history)

        print(f"[DEBUG] Response type: {type(response)}")
        print(f"[DEBUG] Response.choices: {response.choices if hasattr(response, 'choices') else 'No choices'}")

        response_message = response.choices[0].message
        tool_calls = response_message.tool_calls

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        if tool_calls:
            print(f"[DEBUG] Tool calls detected: {len(tool_calls)}")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å tool_calls –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({
                "role": "assistant",
                "content": response_message.content,
                "tool_calls": [
                    {
                        "id": tc.id,
                        "type": tc.type,
                        "function": {
                            "name": tc.function.name,
                            "arguments": tc.function.arguments
                        }
                    } for tc in tool_calls
                ]
            })

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
            for tool_call in tool_calls:
                function_name = tool_call.function.name
                function_args = json.loads(tool_call.function.arguments)

                print(f"[DEBUG] Calling function: {function_name} with args: {function_args}")

                if function_name == "google_search":
                    function_response = google_search(**function_args)
                else:
                    function_response = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"

                print(f"[DEBUG] Function response: {function_response[:200]}...")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                history.append({
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "content": function_response
                })

            # –î–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
            second_response = call_openai_api(user_model, history, use_tools=False)
            assistant_message = second_response.choices[0].message.content
        else:
            # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ tool calls
            assistant_message = response_message.content

        print(f"[DEBUG] Raw assistant_message: '{assistant_message}' (type: {type(assistant_message)})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not assistant_message or assistant_message.strip() == "":
            print(f"[ERROR] Empty response from OpenAI. Full response: {response}")
            assistant_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        print(f"[DEBUG] Assistant message length: {len(assistant_message) if assistant_message else 0}")
        print(f"[DEBUG] Assistant message preview: {assistant_message[:100] if assistant_message else 'None'}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ tool calls)
        if not tool_calls:
            history.append({
                "role": "assistant",
                "content": assistant_message
            })
        else:
            # –ï—Å–ª–∏ –±—ã–ª–∏ tool calls, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            history.append({
                "role": "assistant",
                "content": assistant_message
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        save_chat_history(chat_id, history)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.reply_to(message, assistant_message, parse_mode='Markdown')
        except Exception as markdown_error:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"Markdown error: {markdown_error}")
            bot.reply_to(message, assistant_message)

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_message)
        import traceback
        traceback.print_exc()
        bot.reply_to(message,
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/new` –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
            parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    try:
        if call.data == "new_chat":
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            clear_chat_history(chat_id)
            bot.answer_callback_query(call.id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
            bot.edit_message_text(
                "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!",
                chat_id,
                message_id
            )

        elif call.data == "select_model":
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            current_model = get_user_model(chat_id)
            model_text = "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*\n\n"

            for model_id, model_info in MODELS.items():
                status = "‚úÖ *–ê–∫—Ç–∏–≤–Ω–∞*" if model_id == current_model else ""
                model_text += f"‚Ä¢ *{model_info['name']}*\n"
                model_text += f"  –°–∫–æ—Ä–æ—Å—Ç—å: `{model_info['speed']}`\n"
                model_text += f"  {model_info['description']}\n"
                if status:
                    model_text += f"  {status}\n"
                model_text += "\n"

            markup = create_model_keyboard(current_model)
            bot.edit_message_text(model_text, chat_id, message_id, reply_markup=markup, parse_mode='Markdown')

        elif call.data.startswith("model_"):
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            selected_model = call.data.replace("model_", "")

            if selected_model in MODELS:
                set_user_model(chat_id, selected_model)
                model_name = MODELS[selected_model]["name"]

                bot.answer_callback_query(call.id, f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é
                model_text = "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*\n\n"
                for model_id, model_info in MODELS.items():
                    status = "‚úÖ *–ê–∫—Ç–∏–≤–Ω–∞*" if model_id == selected_model else ""
                    model_text += f"‚Ä¢ *{model_info['name']}*\n"
                    model_text += f"  –°–∫–æ—Ä–æ—Å—Ç—å: `{model_info['speed']}`\n"
                    model_text += f"  {model_info['description']}\n"
                    if status:
                        model_text += f"  {status}\n"
                    model_text += "\n"

                markup = create_model_keyboard(selected_model)
                bot.edit_message_text(model_text, chat_id, message_id, reply_markup=markup, parse_mode='Markdown')

        elif call.data == "back_to_menu":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            current_model = get_user_model(chat_id)
            model_name = MODELS[current_model]["name"]

            menu_text = f"""
‚öôÔ∏è *–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫*

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{model_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            markup = create_menu_keyboard()
            bot.edit_message_text(menu_text.strip(), chat_id, message_id, reply_markup=markup, parse_mode='Markdown')

    except Exception as e:
        print(f"Error in callback handler: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {HISTORY_DIR.absolute()}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    bot.infinity_polling()
