#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

print("‚ö° –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GPT")
print("=" * 60)
print()

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
test_message = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: –∫–∞–∫ –¥–µ–ª–∞?"

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
models = [
    "gpt-5",
    "gpt-5-mini",
    "gpt-4o",
    "gpt-4o-mini",
    "gpt-3.5-turbo"
]

results = []

for model in models:
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é: {model}")

    try:
        start_time = time.time()

        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "user", "content": test_message}
            ],
            max_completion_tokens=100
        )

        end_time = time.time()
        duration = end_time - start_time

        answer = response.choices[0].message.content
        tokens = response.usage.total_tokens

        results.append({
            "model": model,
            "duration": duration,
            "tokens": tokens,
            "answer": answer
        })

        print(f"   ‚è±  –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
        print(f"   üìä –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
        print(f"   üí¨ –û—Ç–≤–µ—Ç: {answer[:50]}...")
        print()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:80]}")
        print()

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
results.sort(key=lambda x: x["duration"])

print("=" * 60)
print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–æ—Ç —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –∫ —Å–∞–º–æ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π):")
print("=" * 60)
print()

for i, result in enumerate(results, 1):
    print(f"{i}. {result['model']}")
    print(f"   ‚è±  {result['duration']:.2f} —Å–µ–∫")
    print(f"   üìä {result['tokens']} —Ç–æ–∫–µ–Ω–æ–≤")
    print()

print("=" * 60)
print(f"‚úÖ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å: {results[0]['model']} ({results[0]['duration']:.2f} —Å–µ–∫)")
print(f"‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ—Ç–∞: {results[0]['model']}")
