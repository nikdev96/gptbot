#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ vision –≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö...")
print()

# –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ URL (–ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
test_image_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/320px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"

models_to_test = ["gpt-5", "gpt-4o", "gpt-4o-mini"]

for model in models_to_test:
    print(f"–¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: {model}")
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "What's in this image? Answer in one short sentence."},
                        {"type": "image_url", "image_url": {"url": test_image_url}}
                    ]
                }
            ],
            max_completion_tokens=100
        )
        print(f"  ‚úÖ {model} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision!")
        print(f"     –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
    except Exception as e:
        print(f"  ‚ùå {model} –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision")
        print(f"     –û—à–∏–±–∫–∞: {str(e)[:100]}")
    print()
